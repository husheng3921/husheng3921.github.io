[{"title":"git常用命令总结","url":"/2020/03/03/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/","content":"<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p><img src=\"/img/git-1-1.png\" alt=\"\"></p>\n<ul>\n<li>工作区 Workspace  </li>\n<li>暂存区index/stage  </li>\n<li>本地仓库 repository  </li>\n<li>远程仓库 remote  </li>\n</ul>\n<h2 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h2><h3 id=\"暂存修改\"><a href=\"#暂存修改\" class=\"headerlink\" title=\"暂存修改\"></a>暂存修改</h3><p>操作一览表  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">创建stash    git stash  </span><br><span class=\"line\">删除         git stash drop stash@&#123;num&#125;  </span><br><span class=\"line\">应用         git stash apply stash@&#123;num&#125;  </span><br><span class=\"line\">查看         git stash list  </span><br><span class=\"line\">还原上一个暂存并删除暂存(如无conflict)    git stash pop</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h3><ul>\n<li>还未提交到暂存区<br>即还没有使用git add ,可以使用<br><code>git checkout -- filename.txt</code><br>丢弃当前工作区文件的修改，文件参数也可以是* 放弃全部。</li>\n<li>还未提交仓库<br>已经add到暂存，但是为commit可以使用  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git reset HEAD filename.txt  </span><br><span class=\"line\">git checkout -- filename.txt</span><br></pre></td></tr></table></figure>\n先reset撤掉暂存区（add反操作），然后再checkout撤回工作区。</li>\n<li>已提交到仓库<br>可以指定版本回退<br><code>git reset --hard xxx版本号</code>  </li>\n<li>撤销之前某次提交<br>git revert撤销一个提交的同时会创建一个新的提交，这是一个安全的方法，因为它不会重写提交历史。但实现上和reset是完全不同的。它撤销这个提交引入的更改，然后在最后加上一个撤销了更改的新提交，而不是从项目历史中移除这个提交。<br><code>git revert 46af7z6</code><br>相较于 reset ， revert不会改变项目历史，对那些已经发布到共享仓库的提交来说这是一个安全的操作。其次 git revert 可以将提交历史中的任何一个提交撤销、而 reset会把历史上某个提交及之后所有的提交都移除掉，这太野蛮了。<br>相比 reset，它不会改变现在的提交历史。因此， revert 可以用在公共分支上， reset 应该用在私有分支上。<h2 id=\"分支操作\"><a href=\"#分支操作\" class=\"headerlink\" title=\"分支操作\"></a>分支操作</h2><h3 id=\"创建-查看-合并分支\"><a href=\"#创建-查看-合并分支\" class=\"headerlink\" title=\"创建/查看/合并分支\"></a>创建/查看/合并分支</h3>操作一览  <table>\n<thead>\n<tr>\n<th>操作</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查看分支</td>\n<td>git branch</td>\n</tr>\n<tr>\n<td>查看本地和远程分支</td>\n<td>git branch -a</td>\n</tr>\n<tr>\n<td>在target分支上创建分支，没有则从当前分支</td>\n<td>git branch &lt;branch-name&gt; &lt;target-branch&gt;</td>\n</tr>\n<tr>\n<td>创建并切换分支</td>\n<td>git checkout -b &lt;branch-name&gt;</td>\n</tr>\n<tr>\n<td>合并某分支到当前分支</td>\n<td>git merge &lt;branch-name&gt;</td>\n</tr>\n<tr>\n<td>删除分支，只能删参与了合并的</td>\n<td>git branch -d &lt;branch-name&gt;</td>\n</tr>\n<tr>\n<td>强行删除</td>\n<td>git branch -D &lt;branch-name&gt;</td>\n</tr>\n<tr>\n<td>删除远程分支</td>\n<td>git push origin –delete &lt;remote-branch-name&gt;</td>\n</tr>\n<tr>\n<td>显示远程分支</td>\n<td>git remote show origin</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h2 id=\"配置多个远程仓库\"><a href=\"#配置多个远程仓库\" class=\"headerlink\" title=\"配置多个远程仓库\"></a>配置多个远程仓库</h2><p><code>git remote set-url --add origin https://github.com/78778443/gittest.git</code>  </p>\n<h2 id=\"覆盖远程仓库\"><a href=\"#覆盖远程仓库\" class=\"headerlink\" title=\"覆盖远程仓库\"></a>覆盖远程仓库</h2><p><code>本地仓库版本落后于远程仓库版本时，  \ngit push -f 强制推送</code></p>\n<h2 id=\"查看操作日志\"><a href=\"#查看操作日志\" class=\"headerlink\" title=\"查看操作日志\"></a>查看操作日志</h2><pre><code>git relog 查看操作日志，git log 只能查看版本日志  \ngit checkout -b  retest_v3  b52b955 找回分支 后两项：分支名称，提交id</code></pre><h2 id=\"rebase\"><a href=\"#rebase\" class=\"headerlink\" title=\"rebase\"></a>rebase</h2><ul>\n<li>git merge命令合并代码之后，版本记录会按照时间顺序排序，并自动产生一个Merge branch的版本；</li>\n<li>git rebase命令合并代码之后，版本记录会将目标分支的版本放在后面，然后再将当前分支的版本记录放在前边。</li>\n</ul>\n","tags":["git"]},{"title":"linux命令行与shell脚本学习2","url":"/2020/03/03/linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8Eshell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A02/","content":"<h1 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h1><h3 id=\"文件组织\"><a href=\"#文件组织\" class=\"headerlink\" title=\"文件组织\"></a>文件组织</h3><p>root根目录下： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@node1 &#x2F;]# ls</span><br><span class=\"line\">bin  boot  dev  dfs  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/linux-2-1.png\" alt=\"\">  </p>\n<ul>\n<li>bin：英语 binary 的缩写，表示”二进制文件”（我们知道可执行文件是二进制的）。包含了会被所有用户使用的可执行程序；</li>\n<li>boot：英语 boot 表示”启动”，包含与 Linux 启动密切相关的文件；</li>\n<li>dev：英语 device 的缩写，表示”设备”，包含外设。它里面的子目录，每一个对应一个外设。比如代表我们的光盘驱动器的文件就会出现在这个目录下面；</li>\n<li>etc：etc 有点不能顾名思义了。因为 etc 是法语 et cetera 的缩写，翻成英语就是”and so on”，表示”…等等”，包含系统的配置文件。至于为什么在 /etc 下面存放配置文件， 按照原始的 Unix 说法（Linux 文件结构参考 Unix 的教学实现 MINIX），这下面放的都是一堆零零碎碎的东西， 就叫 etc 好了。哈哈 ，这其实是个历史遗留；</li>\n<li>home：英语 home 表示”家”，用户的私人目录。之前我们提过一些，在这个目录中，我们放置私人的文件，有点类似 Windows 中的 Documents 这个文件夹，也叫”我的文档”。Linux 中的每个用户（除了大管家用户，也就是超级用户 root 外。root 因为太厉害，拥有所有权限，所以比较”任性”，跟普通用户不住在一起）都在 home 目录下有自己的一个私人目录。比如我的用户名是 oscar，那么我的私人目录就是 /home/oscar；如果另一个用户叫 john，那么他的私人目录就是 /home/john；</li>\n<li>lib：英语 library 的缩写，表示”库”，包含被程序所调用的库文件。例如 .so 结尾的文件，在 Windows 下这样的库文件是以 .dll 结尾的；</li>\n<li>media：英语 media 表示”媒体”。当一个可移动的外设（比如 USB 盘、SD 卡、DVD、光盘等等）插入电脑时，Linux 就可以让我们通过 media 的子目录来访问这些外设中的内容。</li>\n<li>mnt：英语 mount 的缩写，表示”挂载”。有点类似 media，但一般用于临时挂载一些装置；</li>\n<li>opt：英语 optional application software package 的缩写，表示”可选的应用软件包”，用于安装多数第三方软件和插件；</li>\n<li>root：英语”根”的意思。超级用户 root 的家目录/主目录。一般用户的家目录是位于 /home 下，不过 root 用户是个例外。之前的课程我们也提到过，root 是整个系统的超级用户，拥有一切权限，初学者请慎用此用户模式；</li>\n<li>sbin：英语 system binary 的缩写，表示”系统二进制文件”。比起 bin 目录多了一个前缀 system，所以包含的是系统级的重要可执行程序；</li>\n<li>srv：英语 service的缩写，表示”服务”。包含一些网络服务启动之后所需要取用的数据；</li>\n<li>tmp：英语 temporary 的缩写，表示”临时的”。普通用户和程序存放临时文件的地方；</li>\n<li>usr：英语 Unix Software Resource 的缩写，表示”Unix 操作系统软件资源”（也是个历史遗留的命名）。这个目录是最庞大的目录之一。有点类似 Windows 中的 C:\\Windows 和 C:\\Program Files 这两个文件夹的集合。在这里面安装了大部分用户要调用的程序；</li>\n<li>var：英语 variable 的缩写，表示”动态的，可变的”。通常包含程序的数据，比如一些 log（日志）文件，记录电脑中发生了什么事。 </li>\n</ul>\n<h3 id=\"pwd、which\"><a href=\"#pwd、which\" class=\"headerlink\" title=\"pwd、which\"></a>pwd、which</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pwd 显示当前目录的路径 </span><br><span class=\"line\">[root@node1 ~]# pwd</span><br><span class=\"line\">&#x2F;root  </span><br><span class=\"line\">pwd 就是 print work directory,打印当前工作目录  </span><br><span class=\"line\"></span><br><span class=\"line\">which 获取命令可执行文件的位置  </span><br><span class=\"line\">[root@node1 ~]# which bash</span><br><span class=\"line\">&#x2F;usr&#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ls、cd、du\"><a href=\"#ls、cd、du\" class=\"headerlink\" title=\"ls、cd、du\"></a>ls、cd、du</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ls 列出文件和目录  </span><br><span class=\"line\">ls -a 显示所有文件和目录，包括隐藏的  </span><br><span class=\"line\">ls -l 显示文件和目录详细信息列表  </span><br><span class=\"line\">ls -lh 适合人阅读的  </span><br><span class=\"line\">ls -lt 按最近修改时间排序显示  </span><br><span class=\"line\">ls -alht 综合使用</span><br></pre></td></tr></table></figure>\n<p>例子如图所示:<br><img src=\"/img/linux-2-2.png\" alt=\"\">  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd change directory ,切换目录   </span><br><span class=\"line\">[root@node1 ~]# cd testHadoop&#x2F;</span><br><span class=\"line\">[root@node1 testHadoop]# pwd</span><br><span class=\"line\">&#x2F;root&#x2F;testHadoop  </span><br><span class=\"line\"></span><br><span class=\"line\">相对路径</span><br><span class=\"line\">cd testHadoop testHadoop 位于root目录，如果退出了root目录，就不能再执行cd testHadoop  </span><br><span class=\"line\"></span><br><span class=\"line\"> 绝对路径  </span><br><span class=\"line\">[root@node1 home]# cd &#x2F;root&#x2F;testHadoop&#x2F;</span><br><span class=\"line\">[root@node1 testHadoop]# pwd</span><br><span class=\"line\">&#x2F;root&#x2F;testHadoop  </span><br><span class=\"line\"></span><br><span class=\"line\">重回家目录  </span><br><span class=\"line\">cd &#x2F;home&#x2F;husheng  或&#x2F;root  </span><br><span class=\"line\">cd ~  </span><br><span class=\"line\">cd  </span><br><span class=\"line\"></span><br><span class=\"line\">du disk usage的缩写，表示磁盘使用&#x2F;占用  </span><br><span class=\"line\">du -a 显示文件和目录的大小  </span><br><span class=\"line\">du -h 适合人阅读的  </span><br><span class=\"line\">du -s 只显示总计大小  </span><br><span class=\"line\">[root@node1 testHadoop]# du -ah</span><br><span class=\"line\">4.0K    .&#x2F;myFile.txt</span><br><span class=\"line\">4.0K    .</span><br><span class=\"line\">[root@node1 testHadoop]# du -hs</span><br><span class=\"line\">4.0K    .</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"less、cat显示文件内容\"><a href=\"#less、cat显示文件内容\" class=\"headerlink\" title=\"less、cat显示文件内容\"></a>less、cat显示文件内容</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat 命令一次性显示所有内容，  </span><br><span class=\"line\">cat 文件名，即可查看文件内容  </span><br><span class=\"line\">cat -n 文件内容显示加上行号</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/linux-2-4.png\" alt=\"\">  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">less 相较于cat不会全部显示，而是分页显示，more命令也类似功能，但是只能向前翻页，没法后退。  </span><br><span class=\"line\">cd &#x2F;usr&#x2F;log  </span><br><span class=\"line\">less yum.log  </span><br><span class=\"line\">常用快捷键：  </span><br><span class=\"line\">空格键：文件内容读取下一个终端屏幕的行数，相当于前进一个屏幕（页）。很常用的快捷键。与键盘上的 PageDown（下一页）效果一样；</span><br><span class=\"line\">回车键：文件内容读取下一行，也就是前进一行，与键盘上的向下键效果是一样的；</span><br><span class=\"line\">d 键：前进半页（半个屏幕）；</span><br><span class=\"line\">b 键：后退一页，与键盘上的 PageUp（上一页）效果一样；</span><br><span class=\"line\">y 键：后退一行，与键盘上的向上键效果是一样的；</span><br><span class=\"line\">u 键：后退半页（半个屏幕）；</span><br><span class=\"line\">q 键：停止读取文件，中止 less 命令。  </span><br><span class=\"line\">高级用法：  </span><br><span class=\"line\">&#x3D; 显示当前是多少行，总共多少行  </span><br><span class=\"line\">&#x2F; 进入搜索模式，按n键跳到下一个符合要求的位置， N跳转上一个位置</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/linux-2-5.png\" alt=\"\"><br><img src=\"/img/linux-2-6.png\" alt=\"\"><br><img src=\"/img/linux-2-7.png\" alt=\"\"></p>\n<h3 id=\"head与tail显示文件头和尾\"><a href=\"#head与tail显示文件头和尾\" class=\"headerlink\" title=\"head与tail显示文件头和尾\"></a>head与tail显示文件头和尾</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">head yum.log  显示文件头10行  </span><br><span class=\"line\">head -n yum.log 显示文件指定头n行  </span><br><span class=\"line\"></span><br><span class=\"line\">tail yum.log 显示文件尾10行  </span><br><span class=\"line\">tail -n yum.log 显示文件尾指定行数  </span><br><span class=\"line\">tail -f yum.log 实时跟踪yum.log更新，ctr + C 结束</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/linux-2-8.png\" alt=\"\"></p>\n<h3 id=\"touch与mkdir新建文件与文件夹\"><a href=\"#touch与mkdir新建文件与文件夹\" class=\"headerlink\" title=\"touch与mkdir新建文件与文件夹\"></a>touch与mkdir新建文件与文件夹</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">touch newfile 创建一个空文件  </span><br><span class=\"line\">touch newfile1 newfile2 创建多个文件  </span><br><span class=\"line\">mkdir newfolder 创建一个空文件夹  </span><br><span class=\"line\">mkdir newfolder1 newfolder2 创建多个文件夹  </span><br><span class=\"line\">mkdir -p &#x2F;husheng&#x2F;cnhk 递归创建子文件夹</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/linux-2-9.png\" alt=\"\"></p>\n","tags":["linux","shell"]},{"title":"linux命令行与shell脚本学习1","url":"/2020/03/03/linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8Eshell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A01/","content":"<h1 id=\"操作系统介绍\"><a href=\"#操作系统介绍\" class=\"headerlink\" title=\"操作系统介绍\"></a>操作系统介绍</h1><h2 id=\"操作系统定义\"><a href=\"#操作系统定义\" class=\"headerlink\" title=\"操作系统定义\"></a>操作系统定义</h2><ul>\n<li>从操作系统层往两侧看：负责管理协调硬件、软件等计算机资源的工作  </li>\n<li>从上往下看：为上层的应用程序和用户提供简单易用的服务 </li>\n<li>从下往上看：操作系统系统软件，而不是硬件  </li>\n</ul>\n<h2 id=\"电脑启动顺序\"><a href=\"#电脑启动顺序\" class=\"headerlink\" title=\"电脑启动顺序\"></a>电脑启动顺序</h2><ol>\n<li>启动界面  </li>\n<li>操作系统的启动</li>\n<li>其他程序(系统上的软件)的启动<br>示意图如图：<br><img src=\"/img/linux-1-1.jpg\" alt=\"\"></li>\n</ol>\n<p>启动界面的有一小段程序是运行在主板上的，也就是通常我们说的BIOS界面。如果装了双系统，启动时候，BootLoader会提示你做选择，选择哪个系统。<br>百度百科：<br>“Bootloader 是在操作系统内核运行之前运行的一段小程序。通过这段小程序，我们可以初始化硬件设备，建立内存空间的映射图，从而将系统的软硬件环境带到一个合适的状态，以便为最终调用操作系统内核准备好正确的环境。通常，Bootloader 是严重地依赖于硬件而实现的，特别是在嵌入式领域。”<br>双系统启动示意图：<br><img src=\"/img/linux-1-2.jpg\" alt=\"\">  </p>\n<h2 id=\"Linux操作系统\"><a href=\"#Linux操作系统\" class=\"headerlink\" title=\"Linux操作系统\"></a>Linux操作系统</h2><h3 id=\"什么是GNU\"><a href=\"#什么是GNU\" class=\"headerlink\" title=\"什么是GNU\"></a>什么是GNU</h3><p>GNU实际上是”GNU is Not Unix”,GNU是一个免费的操作系统，而且它还是自由的。<br>GNU项目的创建者是Richard Stallman;与他相关的主要有以下：  </p>\n<ul>\n<li>自由软件基金会(Free Software Fundation)的主席  </li>\n<li>GNU项目创始人，所写作的GNU通用公共许可证(GNU GPL)是采用最广泛的自由软件许可证。遵循一种CopyRight:可拷贝、可修改、可出售，但是改进和修改的源码必须向用户公开。保证了自由软件的传播性。</li>\n<li>主要作品：Emacs,GCC(GNU Compiler Collection,GNU编译器集合),GDB(GNU Project Debugger,GNU项目调试器)。  </li>\n<li>GNU项目首要目的是创建一个类Unix系统。 </li>\n</ul>\n<h3 id=\"Unix、GNU、Linux的关系\"><a href=\"#Unix、GNU、Linux的关系\" class=\"headerlink\" title=\"Unix、GNU、Linux的关系\"></a>Unix、GNU、Linux的关系</h3><ul>\n<li>Unix系统是一款商业操作系统  </li>\n<li>Linux系统是Linus Torvalds开发的类Unix操作系统。  </li>\n<li>GNU 项目（开源的各种程序）+ Linux （操作系统内核）= GNU/Linux 这一个完整的操作系统。  </li>\n</ul>\n<p>用一张图总结下他们的关系：<br><img src=\"/img/linux-1-3.jpg\" alt=\"\"></p>\n<h3 id=\"Linux发行版\"><a href=\"#Linux发行版\" class=\"headerlink\" title=\"Linux发行版\"></a>Linux发行版</h3><p>Linux系统是开源自由的，用户可以修改源码定制自己的系统。下面列举主要发行版：  </p>\n<ul>\n<li>RedHat:红帽，2018年被IBM高价收购；性能稳定，老牌的Linux发行版；目前主要两个系列：由RedHat公司提供收费的Redhat EnterPrise Linux,社区开发免费的Fedora Core。</li>\n<li>Fedora: Redhat的免费后继版。安装简单，更新频率快，不稳定。  </li>\n<li>CentOS：适用于服务器的 RedHat 版本是 RedHat Enterprise Linux（表示”红帽企业 Linux”，简称 RHEL），这是个收费的操作系统。CentOS 可以算是 RHEL 的克隆版，它最大的好处是免费。CentOS 是 Community Enterprise Operating System 的缩写，表示”社区企业操作系统”，兼顾社区与企业特性。稳定、长期更新、保守性被企业普遍使用。  </li>\n<li>DeBian：最早由 Ian Murdock 于 1993 年创建。可以算是迄今为止，最遵循 GNU 规范的 Linux 系统。Debian 系统分为三个版本分支（branch）：stable，testing 和 unstable。  </li>\n<li>Ubuntu：Debian 的后继或一个分支。</li>\n<li>Deepin：由武汉深之度科技有限公司开发的，为祖国自豪一下。易用。Deepin 不仅仅对最优秀的开源产品进行集成和配置，还开发了基于 HTML5 技术的全新桌面环境、系统设置中心、以及音乐播放器，视频播放器，软件中心等一系列面向日常使用的应用软件。  </li>\n<li>FreeBSD：首先要强调的是：FreeBSD 不是一个 Linux 系统！因为 FreeBSD 的用户也相当多，其许多特性都与 Linux 相类似。事实上，Linux 和 BSD（Berkeley Software Distribution）均是 Unix 的演化分支。并且，Linux 中相当多的特性和功能（比如用于配置 DNS 的 Bind 软件）都是取自于 BSD 的。而 FreeBSD 便是 BSD 家族中最出名，用户数量最多的一个发行版。苹果的 macOS 的内核 Darwin 以前也部分地借鉴了 FreeBSD。  </li>\n</ul>\n<p>用图表示各发行版的关系：<br><img src=\"/img/linux-1-4.jpg\" alt=\"\">  </p>\n","tags":["linux","shell"]},{"title":"基于gitee和hexo搭建个人博客","url":"/2020/02/23/%E5%9F%BA%E4%BA%8Egitee%E5%92%8Chexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","content":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>最近折腾博客，开始采用github page方式的静态博客，但是考虑到国内访问GitHub速度慢且不稳定，故在原有GitHub和hexo(AirCloud搭建的博客基础上，迁移到码云Gitee上，这里有些坑提出来，供大家参考。参考博客：<a href=\"https://segmentfault.com/a/1190000018662692?utm_source=tag-newest\" target=\"_blank\" rel=\"noopener\">基于Gitee+Hexo搭建个人博客</a></p>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>打开hexo官网<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">hexo doc</a>;参照指南安装好node，git。注意国内访问npm镜像较慢，切换成淘宝镜像源，执行下面命令：<br>切换淘宝镜像<br><code>$ npm config set registry https://registry.npm.taobao.org</code><br>查看是否切换到淘宝镜像<br><code>$ npm info underscore</code>  </p>\n<h4 id=\"1、安装hexo\"><a href=\"#1、安装hexo\" class=\"headerlink\" title=\"1、安装hexo\"></a>1、安装hexo</h4><p>使用npm安装hexo<br><code>$ npm install -g hexo-cli</code><br>这里可能会出错，<a href=\"https://blog.csdn.net/sunxiaoju/article/details/102568075\" target=\"_blank\" rel=\"noopener\">参考链接</a>中的错误，cmd中输入命令行：<br><code>$ set-ExecutionPolicy RemoteSigned 选择A</code>  </p>\n<h4 id=\"2、建站\"><a href=\"#2、建站\" class=\"headerlink\" title=\"2、建站\"></a>2、建站</h4><p>hexo安装完后，执行下面命令：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ cd &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>执行完后生成如下：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、配置\"><a href=\"#3、配置\" class=\"headerlink\" title=\"3、配置\"></a>3、配置</h4><p>主要是在_config.yml修改属性<br>具体说明参考<a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">hexo官方配置</a>，我使用的主题是<a href=\"https://github.com/aircloud/hexo-theme-aircloud\" target=\"_blank\" rel=\"noopener\">aircloud</a>,主题配置参考下面命令：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cd themes</span><br><span class=\"line\">$ git clone https:&#x2F;&#x2F;github.com&#x2F;aircloud&#x2F;hexo-theme-aircloud.git  </span><br><span class=\"line\">然后修改_config.yml中属性theme: hexo-theme-aircloud</span><br></pre></td></tr></table></figure>\n<p>我这里给出我主要的配置信息供参考：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title: husheng3921</span><br><span class=\"line\">subtitle: Stay Hungry, Stay Foolish!</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: Hu Sheng</span><br><span class=\"line\">language: zh</span><br><span class=\"line\">timezone: &#39;&#39;</span><br><span class=\"line\"></span><br><span class=\"line\"># Site settings</span><br><span class=\"line\"># 网站综合内容设置：</span><br><span class=\"line\">SEOTitle: husheng3921的博客 | husheng3921&#39;s Blog</span><br><span class=\"line\">email: husheng3921@gmail.com</span><br><span class=\"line\">description: &quot;胡圣的博客&quot;</span><br><span class=\"line\"># keyword: &quot;腾讯&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 头像图片地址</span><br><span class=\"line\">sidebar-avatar: img&#x2F;avatar.jpg</span><br><span class=\"line\">avatar_style:</span><br><span class=\"line\">  radius: true</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># search博客内容搜索</span><br><span class=\"line\">search:</span><br><span class=\"line\">  path: search.json</span><br><span class=\"line\">  field: post</span><br><span class=\"line\"></span><br><span class=\"line\"># SNS settings</span><br><span class=\"line\"># 一些社交平台地址，支持以下几种：</span><br><span class=\"line\">weibo_username:     5012869548</span><br><span class=\"line\">github_username:    husheng3921</span><br><span class=\"line\"># twitter_username:   iconie_alloy</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 评论</span><br><span class=\"line\">comment:</span><br><span class=\"line\">   type: disqus</span><br><span class=\"line\">   script: &#39;https:&#x2F;&#x2F;airclouds-blog.disqus.com&#x2F;embed.js&#39;</span><br><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class=\"line\">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class=\"line\">theme: hexo-theme-aircloud</span><br><span class=\"line\"></span><br><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  # gitee.com</span><br><span class=\"line\">  repo: https:&#x2F;&#x2F;gitee.com&#x2F;husheng3921&#x2F;husheng3921</span><br><span class=\"line\">  # repo: https:&#x2F;&#x2F;github.com&#x2F;husheng3921&#x2F;husheng3921.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、命令\"><a href=\"#4、命令\" class=\"headerlink\" title=\"4、命令\"></a>4、命令</h4><p>主要有新建、本地运行、部署,<a href=\"https://hexo.io/zh-cn/docs/commands\" target=\"_blank\" rel=\"noopener\">详见</a>；  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new [layout] &lt;filename&gt;  新建</span><br><span class=\"line\">hexo server  本地运行</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5、部署\"><a href=\"#5、部署\" class=\"headerlink\" title=\"5、部署\"></a>5、部署</h4><ul>\n<li>GitHub部署<br>在github新建仓库，<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">在_config.yml中修改  </span><br><span class=\"line\">deploy:</span><br><span class=\"line\">    repo: 新建的博客GitHub仓库地址</span><br><span class=\"line\">运行部署  </span><br><span class=\"line\">hexo clean  </span><br><span class=\"line\">hexo deploy。</span><br></pre></td></tr></table></figure></li>\n<li>Gitee上部署<br><strong>坑一</strong><br>在gitee上新建仓库时注意仓库名字要与你的Gitee账户一致，例如我的仓库名字husheng3921(与账户名一样),这样才能保证Gitee创建博客的域名就是<code>http://husheng3921.gitee.io</code>,否则后面会带有后缀，例如仓库名:blog，系统会生成<code>http://husheng3921.gitee.io/blog</code>,你还需要在_confiy.yml中root属性配置blog值。  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">在_config.yml中修改  </span><br><span class=\"line\">deploy:</span><br><span class=\"line\">    repo: 新建的博客gitee仓库地址</span><br><span class=\"line\">运行部署  </span><br><span class=\"line\">hexo clean  </span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n点击博客仓库-服务-Gitee Pages<br><img src=\"/img/gitee1.png\" alt=\"\"><br><img src=\"/img/gitee2.jpg\" alt=\"\"><br>启动成功后如下<br><img src=\"/img/gitee3.jpg\" alt=\"\"><br><strong>坑二</strong><br>每次hexo deploy部署后，都要点击更新按钮，内容才回更新。这个比github上麻烦一点。 </li>\n</ul>\n<h3 id=\"末尾\"><a href=\"#末尾\" class=\"headerlink\" title=\"末尾\"></a>末尾</h3><p>距上一次在CSDN上写博客已经快3年了，上次写的也是入门级教程，感觉逻辑和语言还是有些小毛病，争取一次次改进，锻炼自己的书写能力，通过写博客来加深自己对知识的理解。</p>\n","tags":["git","入门"]},{"title":"Hello World","url":"/2020/02/23/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"}]